{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\components\\FileDrop.svelte",
    "..\\src\\components\\Diagram.svelte",
    "..\\src\\components\\Loader.svelte",
    "..\\src\\Inspector.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount } from 'svelte';\r\n\r\n  import fileDrop from 'file-drops';\r\n\r\n  export let onFileDrop;\r\n\r\n  const dropHandler = fileDrop('Drop a file', function(files) {\r\n    // files = [ { name, contents }, ... ]\r\n\r\n    if (files.length) {\r\n      let file = files.shift();\r\n\r\n      onFileDrop(file);\r\n    }\r\n  });\r\n\r\n  let element;\r\n\r\n  onMount(() => {\r\n    element.addEventListener('dragover', dropHandler);\r\n  });\r\n</script>\r\n\r\n<style>\r\n  .file-drop {\r\n    height: 100%;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    padding: 0;\r\n  }\r\n\r\n  :global(.file-drop) .drop-overlay {\r\n    align-items: center;\r\n    background: rgba(255, 255, 255, 0.9);\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    pointer-events: none;\r\n    position: relative;\r\n    z-index: 1000;\r\n  }\r\n\r\n  :global(.file-drop) .drop-overlay .box {\r\n    \r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"file-drop\"\r\n  bind:this={element}>\r\n  <slot></slot>\r\n</div>",
    "<script>\r\n  import { onMount, afterUpdate } from 'svelte';\r\n  \r\n  import Viewer from 'bpmn-js/dist/bpmn-navigated-viewer.development.js';\r\n\r\n  export let xml;\r\n\r\n  export let onImportDone;\r\n\r\n  let container, viewer;\r\n\r\n  onMount(() => {\r\n    viewer = new Viewer({\r\n      container\r\n    });\r\n  });\r\n\r\n  afterUpdate(() => {\r\n    if (xml) {\r\n      viewer.importXML(xml, (error, warnings) => {\r\n        if (error) {\r\n          console.error(error);\r\n        }\r\n\r\n        // TODO: remove\r\n        setTimeout(onImportDone, 500);\r\n      });\r\n    }\r\n  });\r\n</script>\r\n\r\n<style>\r\n  div {\r\n    bottom: 0;\r\n    height: 100%;\r\n    left: 0;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n  }\r\n</style>\r\n\r\n<div bind:this={container}></div>",
    "<script>\r\n  export let visible;\r\n\r\n  $: classNames = visible ? 'loader visible' : 'loader';\r\n</script>\r\n\r\n<style>\r\n  .loader {\r\n    align-items: center;\r\n    background-color: white;\r\n    display: flex;\r\n    height: 100%;\r\n    justify-content: center;\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    position: relative;\r\n    z-index: 1000;\r\n  }\r\n\r\n  .loader.visible {\r\n    opacity: 1;\r\n  }\r\n</style>\r\n\r\n<div class={ classNames }>\r\n  <img src=\"animated-logo-grey-48.gif\" />\r\n</div>",
    "<script>\r\n  import Diagram from './components/Diagram.svelte';\r\n  import FileDrop from './components/FileDrop.svelte';\r\n  import Loader from './components/Loader.svelte';\r\n\r\n  let name, xml;\r\n\r\n  let loaderVisible = true;\r\n\r\n  const getDiagram = async url => {\r\n    const response = await fetch(url);\r\n\r\n    const json = await response.json();\r\n\r\n    setDiagram(json);\r\n  }\r\n\r\n  const putDiagram = async diagram => {\r\n    const { contents, name } = diagram;\r\n\r\n    if (contents === xml) {\r\n      return;\r\n    }\r\n\r\n    loaderVisible = true;\r\n\r\n    setDiagram({\r\n      contents,\r\n      path: name\r\n    });\r\n\r\n    const response = await fetch('/api/diagram', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(diagram)\r\n    });\r\n\r\n    const json = await response.json();\r\n\r\n    console.log(json);\r\n  }\r\n\r\n  const setDiagram = ({ contents, path }) => {\r\n    if (contents) {\r\n      xml = contents;\r\n      name = path;\r\n    };\r\n  }\r\n\r\n  getDiagram('/api/diagram');\r\n</script>\r\n\r\n<style>\r\n  .diagram-name {\r\n    font-family: 'Arial', sans-serif;\r\n    left: 20px;\r\n    position: absolute;\r\n    top: 20px;\r\n  }\r\n</style>\r\n\r\n<Loader visible={ loaderVisible }></Loader>\r\n\r\n<FileDrop onFileDrop={ putDiagram }>\r\n  <Diagram xml={ xml } onImportDone={ () => loaderVisible = false } />\r\n</FileDrop>\r\n\r\n<div class=\"diagram-name\">{ name }</div>"
  ],
  "names": [],
  "mappings": "AAyBE,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,CAAC,AACZ,CAAC,AAEO,UAAU,AAAC,CAAC,aAAa,AAAC,CAAC,AACjC,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,AACf,CAAC,AAEO,UAAU,AAAC,CAAC,aAAa,CAAC,IAAI,AAAC,CAAC,AAExC,CAAC;ACbD,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,CACR,GAAG,CAAE,CAAC,AACR,CAAC;ACnCD,OAAO,eAAC,CAAC,AACP,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,CACvB,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,OAAO,QAAQ,eAAC,CAAC,AACf,OAAO,CAAE,CAAC,AACZ,CAAC;ACkCD,aAAa,eAAC,CAAC,AACb,WAAW,CAAE,OAAO,CAAC,CAAC,UAAU,CAChC,IAAI,CAAE,IAAI,CACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,AACX,CAAC"
}